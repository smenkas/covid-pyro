{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Building on the tutorial at https://pyro.ai/examples/sir_hmc.html, the folks at Pyro created an additional interface for SIR modeling that compresses much of the info that that tutorial provided into a concrete interface for compartmental modeling. Below is that work, drawn from http://pyro.ai/examples/epi_intro.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-13T20:10:19.227985Z",
     "start_time": "2021-01-13T20:10:14.214521Z"
    }
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import torch\n",
    "import pyro\n",
    "import pyro.distributions as dist\n",
    "from pyro.contrib.epidemiology import CompartmentalModel, binomial_dist, infection_dist\n",
    "\n",
    "%matplotlib inline\n",
    "#assert pyro.__version__.startswith('1.5.0') # I have 1.5.1, hopefully not a problem to comment this out. \n",
    "torch.set_default_dtype(torch.double)  # Required for MCMC inference.\n",
    "pyro.enable_validation(True)  # Always a good idea.\n",
    "smoke_test = ('CI' in os.environ)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-13T20:10:19.238065Z",
     "start_time": "2021-01-13T20:10:19.229882Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'1.5.1'"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pyro.__version__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-13T20:10:19.530483Z",
     "start_time": "2021-01-13T20:10:19.242480Z"
    }
   },
   "outputs": [],
   "source": [
    "ros = []\n",
    "for i in range(1000):\n",
    "    R0 = pyro.sample(\"R0\", dist.LogNormal(0., 1.))\n",
    "    ros.append(R0.item())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-13T20:10:19.792511Z",
     "start_time": "2021-01-13T20:10:19.552208Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([761., 158.,  54.,  14.,   4.,   2.,   2.,   4.,   0.,   1.]),\n",
       " array([ 0.03772956,  1.99673086,  3.95573217,  5.91473347,  7.87373478,\n",
       "         9.83273608, 11.79173739, 13.75073869, 15.70974   , 17.6687413 ,\n",
       "        19.62774261]),\n",
       " <BarContainer object of 10 artists>)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(ros)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Word. This is what it expects R0 to be, most likely btw 0 and 1. Is updated accordingly!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-13T20:10:19.813804Z",
     "start_time": "2021-01-13T20:10:19.796484Z"
    }
   },
   "outputs": [],
   "source": [
    "class SimpleSIRModel(CompartmentalModel):\n",
    "    def __init__(self, population, recovery_time, data):\n",
    "        compartments = (\"S\", \"I\")  # R is implicit.\n",
    "        duration = len(data)\n",
    "        super().__init__(compartments, duration, population)\n",
    "        assert isinstance(recovery_time, float)\n",
    "        assert recovery_time > 1\n",
    "        self.recovery_time = recovery_time\n",
    "        self.data = data\n",
    "\n",
    "    def global_model(self):\n",
    "        \"\"\"\n",
    "        samples global parameters and packs them into a single return value (here a tuple, but any structure is allowed). \n",
    "        The return value is available as the params argument to the other two methods.\n",
    "        \"\"\"\n",
    "        tau = self.recovery_time\n",
    "        R0 = pyro.sample(\"R0\", dist.LogNormal(0., 1.))\n",
    "        rho = pyro.sample(\"rho\", dist.Beta(100, 100))\n",
    "        return R0, tau, rho\n",
    "\n",
    "    def initialize(self, params):\n",
    "        \"\"\"\n",
    "        samples (or deterministically sets) initial values of time series,\n",
    "        returning a dictionary mapping time series name to initial value.\n",
    "        \"\"\"\n",
    "        # Start with a single infection.\n",
    "        return {\"S\": self.population - 1, \"I\": 1}\n",
    "\n",
    "    def transition(self, params, state, t):\n",
    "        \"\"\"\n",
    "        inputs global params, the state at the previous time step, and the time index t (which may be a slice!). \n",
    "        It then samples flows and updates the state dict.\n",
    "        \"\"\"\n",
    "        R0, tau, rho = params # R0 \n",
    "\n",
    "        # Sample flows between compartments.\n",
    "        S2I = pyro.sample(\"S2I_{}\".format(t),\n",
    "                          infection_dist(individual_rate=R0 / tau,\n",
    "                                         num_susceptible=state[\"S\"],\n",
    "                                         num_infectious=state[\"I\"],\n",
    "                                         population=self.population))\n",
    "        I2R = pyro.sample(\"I2R_{}\".format(t),\n",
    "                          binomial_dist(state[\"I\"], 1 / tau))\n",
    "\n",
    "        # Update compartments with flows.\n",
    "        state[\"S\"] = state[\"S\"] - S2I\n",
    "        state[\"I\"] = state[\"I\"] + S2I - I2R\n",
    "\n",
    "        # Condition on observations.\n",
    "        t_is_observed = isinstance(t, slice) or t < self.duration\n",
    "        pyro.sample(\"obs_{}\".format(t),\n",
    "                    binomial_dist(S2I, rho),\n",
    "                    obs=self.data[t] if t_is_observed else None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generating Data\n",
    "\n",
    "What if I don't want to do this? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-13T20:10:28.654607Z",
     "start_time": "2021-01-13T20:10:19.824291Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Simulated 1550.0 infections after 30 attempts\n"
     ]
    }
   ],
   "source": [
    "population = 3000\n",
    "recovery_time = 21.\n",
    "empty_data = [None] * 300\n",
    "model = SimpleSIRModel(population, recovery_time, empty_data)\n",
    "\n",
    "# We'll repeatedly generate data until a desired number of infections is found.\n",
    "pyro.set_rng_seed(20200709)\n",
    "for attempt in range(100):\n",
    "    synth_data = model.generate({\"R0\": 3.0})\n",
    "    total_infections = synth_data[\"S2I\"].sum().item()\n",
    "    if 550 <= total_infections <= 2500:\n",
    "        break\n",
    "print(\"Simulated {} infections after {} attempts\".format(total_infections, 1 + attempt))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-13T20:10:28.686015Z",
     "start_time": "2021-01-13T20:10:28.656894Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderedDict([('R0', tensor(3.)),\n",
       "             ('rho', tensor(0.5465)),\n",
       "             ('I',\n",
       "              tensor([  1.,   1.,   1.,   1.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
       "                        0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
       "                        0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
       "                        0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
       "                        0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
       "                        0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
       "                        0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
       "                        0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
       "                        0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
       "                        0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
       "                        0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
       "                        0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
       "                        0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
       "                        0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
       "                        0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
       "                        0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,\n",
       "                        0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,   1.,   1.,\n",
       "                        1.,   1.,   1.,   1.,   1.,   1.,   1.,   2.,   2.,   2.,   2.,   2.,\n",
       "                        1.,   1.,   1.,   1.,   1.,   2.,   3.,   3.,   3.,   3.,   3.,   4.,\n",
       "                        4.,   4.,   6.,   7.,   7.,   8.,  12.,  14.,  14.,  15.,  13.,  15.,\n",
       "                       15.,  18.,  18.,  20.,  18.,  20.,  22.,  27.,  26.,  34.,  33.,  34.,\n",
       "                       38.,  42.,  42.,  44.,  53.,  60.,  66.,  75.,  75.,  78.,  79.,  81.,\n",
       "                       95., 102., 107., 119., 133., 147., 158., 170., 184., 209., 230., 256.,\n",
       "                      278., 303., 323., 342., 356., 398., 413., 434., 448., 468., 479., 500.,\n",
       "                      528., 555., 590., 632., 665., 685., 704., 726., 757., 788., 821., 845.])),\n",
       "             ('obs',\n",
       "              tensor([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  1.,  0.,\n",
       "                       0.,  0.,  0.,  1.,  1.,  0.,  0.,  1.,  0.,  1.,  2.,  1.,  0.,  2.,\n",
       "                       1.,  1.,  0.,  1.,  0.,  1.,  0.,  2.,  0.,  3.,  1.,  3.,  1.,  2.,\n",
       "                       2.,  3.,  0.,  2.,  9.,  7.,  4.,  7.,  6.,  3.,  2.,  0., 10., 10.,\n",
       "                       4., 11., 11., 12.,  8., 10.,  7., 16., 18., 13., 18., 20., 16., 16.,\n",
       "                      18., 25., 21., 24., 24., 18., 18., 24., 31., 27., 26., 31., 42., 32.,\n",
       "                      23., 27., 27., 38., 30., 36.])),\n",
       "             ('S2I',\n",
       "              tensor([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  1.,  0.,\n",
       "                       0.,  0.,  0.,  1.,  1.,  0.,  2.,  1.,  0.,  1.,  4.,  2.,  1.,  2.,\n",
       "                       1.,  4.,  1.,  3.,  0.,  2.,  0.,  4.,  2.,  6.,  2.,  8.,  1.,  2.,\n",
       "                       5.,  5.,  3.,  4., 11.,  8.,  8., 12.,  7.,  8.,  5.,  6., 17., 13.,\n",
       "                      12., 20., 17., 21., 20., 16., 20., 30., 27., 37., 34., 44., 33., 37.,\n",
       "                      27., 49., 44., 45., 37., 37., 35., 45., 51., 52., 56., 64., 61., 56.,\n",
       "                      49., 56., 61., 65., 59., 66.])),\n",
       "             ('S',\n",
       "              tensor([2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999.,\n",
       "                      2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999.,\n",
       "                      2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999.,\n",
       "                      2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999.,\n",
       "                      2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999.,\n",
       "                      2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999.,\n",
       "                      2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999.,\n",
       "                      2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999.,\n",
       "                      2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999.,\n",
       "                      2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999.,\n",
       "                      2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999.,\n",
       "                      2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999.,\n",
       "                      2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999.,\n",
       "                      2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999.,\n",
       "                      2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999.,\n",
       "                      2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999.,\n",
       "                      2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999.,\n",
       "                      2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999.,\n",
       "                      2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999.,\n",
       "                      2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999., 2999.,\n",
       "                      2999., 2998., 2998., 2998., 2998., 2998., 2998., 2998., 2998., 2998.,\n",
       "                      2998., 2997., 2997., 2997., 2997., 2997., 2997., 2997., 2997., 2997.,\n",
       "                      2997., 2996., 2995., 2995., 2995., 2995., 2995., 2994., 2993., 2993.,\n",
       "                      2991., 2990., 2990., 2989., 2985., 2983., 2982., 2980., 2979., 2975.,\n",
       "                      2974., 2971., 2971., 2969., 2969., 2965., 2963., 2957., 2955., 2947.,\n",
       "                      2946., 2944., 2939., 2934., 2931., 2927., 2916., 2908., 2900., 2888.,\n",
       "                      2881., 2873., 2868., 2862., 2845., 2832., 2820., 2800., 2783., 2762.,\n",
       "                      2742., 2726., 2706., 2676., 2649., 2612., 2578., 2534., 2501., 2464.,\n",
       "                      2437., 2388., 2344., 2299., 2262., 2225., 2190., 2145., 2094., 2042.,\n",
       "                      1986., 1922., 1861., 1805., 1756., 1700., 1639., 1574., 1515., 1449.])),\n",
       "             ('I2R',\n",
       "              tensor([ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "                       0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  1.,\n",
       "                       3.,  2.,  1.,  0.,  0.,  0.,  2.,  2.,  0.,  1.,  3.,  0.,  2.,  1.,\n",
       "                       1.,  1.,  3.,  2.,  2.,  1.,  2.,  3.,  7.,  5.,  4.,  4.,  3.,  6.,\n",
       "                       7.,  8.,  3.,  7.,  9.,  4.,  6.,  5.,  6., 11., 12., 19., 13., 18.,\n",
       "                      13.,  7., 29., 24., 23., 17., 24., 24., 23., 25., 21., 22., 28., 36.,\n",
       "                      30., 34., 30., 34., 26., 42.]))])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "synth_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the model to work, it requires S, S2I, I, I2R, obs (noisy S2I), R0, and rho. \n",
    "\n",
    "\n",
    "At the moment, all of these things are synthetically generated, after we first specify R0, rho and population. \n",
    "\n",
    "For real world, I'll try this now, but we set:\n",
    "\n",
    "S2I = obs, and use reported values for the others. In essence we no longer use the noisy observations and assume whatever is reported is right? \n",
    "\n",
    "I'm not sure if the model will work if we do not specify R0 or rho, so will have to try this and find out. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-13T20:10:28.706688Z",
     "start_time": "2021-01-13T20:10:28.695029Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I.shape = (300,)\n",
      "I2R.shape = (300,)\n",
      "R0.shape = ()\n",
      "S.shape = (300,)\n",
      "S2I.shape = (300,)\n",
      "obs.shape = (300,)\n",
      "rho.shape = ()\n"
     ]
    }
   ],
   "source": [
    "for key, value in sorted(synth_data.items()):\n",
    "    print(\"{}.shape = {}\".format(key, tuple(value.shape)))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-13T20:10:29.688778Z",
     "start_time": "2021-01-13T20:10:28.711102Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8,4))\n",
    "for name, value in sorted(synth_data.items()):\n",
    "    if value.dim():\n",
    "        plt.plot(value, label=name)\n",
    "plt.xlim(0, len(empty_data) - 1)\n",
    "plt.ylim(0.8, None)\n",
    "plt.xlabel(\"time step\")\n",
    "plt.ylabel(\"individuals\")\n",
    "plt.yscale(\"log\")\n",
    "plt.legend(loc=\"best\")\n",
    "plt.title(\"Synthetic time series\")\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Inference"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-13T20:10:29.698870Z",
     "start_time": "2021-01-13T20:10:29.693095Z"
    }
   },
   "outputs": [],
   "source": [
    "# what if we only have obs? can we estimate using just that? \n",
    "obs = synth_data[\"obs\"]\n",
    "model = SimpleSIRModel(population, recovery_time, obs) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-13T20:11:06.512000Z",
     "start_time": "2021-01-13T20:10:29.702611Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO \t Failed to find feasible hypothesis after site obs_292. Retrying...\n",
      "INFO \t Heuristic init: R0=3.2, rho=0.504\n",
      "INFO \t Running inference...\n",
      "INFO \t step 0 loss = 5.31\n",
      "INFO \t step 200 loss = 2.894\n",
      "INFO \t step 400 loss = 1.727\n",
      "INFO \t step 600 loss = 1.572\n",
      "INFO \t step 800 loss = 1.444\n",
      "INFO \t step 1000 loss = 1.409\n",
      "INFO \t step 1200 loss = 1.379\n",
      "INFO \t step 1400 loss = 1.363\n",
      "INFO \t step 1600 loss = 1.369\n",
      "INFO \t step 1800 loss = 1.348\n",
      "INFO \t step 2000 loss = 1.345\n",
      "INFO \t SVI took 32.3 seconds, 61.9 step/sec\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 34.1 s, sys: 4.69 s, total: 38.8 s\n",
      "Wall time: 36.8 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "losses = model.fit_svi(num_steps=101 if smoke_test else 2001,\n",
    "                       jit=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-13T20:11:06.701947Z",
     "start_time": "2021-01-13T20:11:06.514484Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 3))\n",
    "plt.plot(losses)\n",
    "plt.xlabel(\"SVI step\")\n",
    "plt.ylabel(\"loss\")\n",
    "plt.ylim(min(losses), max(losses[50:]));"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-13T20:11:06.711163Z",
     "start_time": "2021-01-13T20:11:06.705526Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R0.shape = (100, 1)\n",
      "auxiliary.shape = (100, 1, 2, 300)\n",
      "rho.shape = (100, 1)\n"
     ]
    }
   ],
   "source": [
    "for key, value in sorted(model.samples.items()):\n",
    "    print(\"{}.shape = {}\".format(key, tuple(value.shape)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## MCMC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-13T20:11:06.723132Z",
     "start_time": "2021-01-13T20:11:06.714671Z"
    }
   },
   "outputs": [],
   "source": [
    "#mcmc = model.fit_mcmc(num_samples=4 if smoke_test else 800, \n",
    "#                      jit_compile=True,)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-13T20:11:07.405590Z",
     "start_time": "2021-01-13T20:11:06.726035Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO \t Predicting latent variables for 300 time steps...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 558 ms, sys: 15.6 ms, total: 574 ms\n",
      "Wall time: 675 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "samples = model.predict()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-13T20:11:07.422326Z",
     "start_time": "2021-01-13T20:11:07.409419Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I.shape = (100, 300)\n",
      "I2R.shape = (100, 300)\n",
      "R0.shape = (100, 1)\n",
      "S.shape = (100, 300)\n",
      "S2I.shape = (100, 300)\n",
      "auxiliary.shape = (100, 1, 2, 300)\n",
      "obs.shape = (100, 300)\n",
      "rho.shape = (100, 1)\n"
     ]
    }
   ],
   "source": [
    "for key, value in sorted(samples.items()):\n",
    "    print(\"{}.shape = {}\".format(key, tuple(value.shape)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-13T20:11:07.811252Z",
     "start_time": "2021-01-13T20:11:07.425850Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/swappy/Documents/anaconda/anaconda/envs/pyprobenv/lib/python3.6/site-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n",
      "/Users/swappy/Documents/anaconda/anaconda/envs/pyprobenv/lib/python3.6/site-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "names = [\"R0\", \"rho\"]\n",
    "fig, axes = plt.subplots(2, 1, figsize=(5, 5))\n",
    "axes[0].set_title(\"Posterior estimates of global parameters\")\n",
    "for ax, name in zip(axes, names):\n",
    "    truth = synth_data[name]\n",
    "    sns.distplot(samples[name], ax=ax, label=\"posterior\")\n",
    "    ax.axvline(truth, color=\"k\", label=\"truth\")\n",
    "    ax.set_xlabel(name)\n",
    "    ax.set_yticks(())\n",
    "    ax.legend(loc=\"best\")\n",
    "plt.tight_layout()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Forecasting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-13T20:11:08.733955Z",
     "start_time": "2021-01-13T20:11:07.814154Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO \t Predicting latent variables for 300 time steps...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 3 µs, sys: 0 ns, total: 3 µs\n",
      "Wall time: 5.72 µs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO \t Forecasting 30 steps ahead...\n"
     ]
    }
   ],
   "source": [
    "%time\n",
    "samples = model.predict(forecast=30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-13T20:11:09.022235Z",
     "start_time": "2021-01-13T20:11:08.736228Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "def plot_forecast(samples):\n",
    "    duration = len(empty_data)\n",
    "    forecast = samples[\"S\"].size(-1) - duration\n",
    "    num_samples = len(samples[\"R0\"])\n",
    "\n",
    "    time = torch.arange(duration + forecast)\n",
    "    S2I = samples[\"S2I\"]\n",
    "    median = S2I.median(dim=0).values\n",
    "    p05 = S2I.kthvalue(int(round(0.5 + 0.05 * num_samples)), dim=0).values\n",
    "    p95 = S2I.kthvalue(int(round(0.5 + 0.95 * num_samples)), dim=0).values\n",
    "\n",
    "    plt.figure(figsize=(8, 4))\n",
    "    plt.fill_between(time, p05, p95, color=\"red\", alpha=0.3, label=\"90% CI\")\n",
    "    plt.plot(time, median, \"r-\", label=\"median\")\n",
    "    plt.plot(time[:duration], obs, \"k.\", label=\"observed\")\n",
    "    plt.plot(time[:duration], synth_data[\"S2I\"], \"k--\", label=\"truth\")\n",
    "    plt.axvline(duration - 0.5, color=\"gray\", lw=1)\n",
    "    plt.xlim(0, len(time) - 1)\n",
    "    plt.ylim(0, None)\n",
    "    plt.xlabel(\"day after first infection\")\n",
    "    plt.ylabel(\"new infections per day\")\n",
    "    plt.title(\"New infections in population of {}\".format(population))\n",
    "    plt.legend(loc=\"upper left\")\n",
    "    plt.tight_layout()\n",
    "\n",
    "plot_forecast(samples)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A suggestion of the authors is to use MCMC rather than SVI to estimate, and this will produce better results with only a little longer compute time. I will avoid doing that for the moment, because I would consider it a higher priority to figure out how to run this model with actual data, rather than manufactured. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Bigger picture:\n",
    "\n",
    "We don't really need to use MCMC do we? We are more interested in the generate data aspect, and seeing how intervention affects outcome. One way to apply MCMC I guess is we have our pandemic generate data function, leave R0 as the initial value, but implement countermeasures and generate data again. Using Inference we can determine what this new R0 is, and indicate how much better this would be. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "pyprobenv",
   "language": "python",
   "name": "pyprobenv"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.12"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": true,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
